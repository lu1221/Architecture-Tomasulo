==========

The following gives a brief description of our underlying design principle.

==========

The run_Tomasolu( .. ) function loops through calling CDB, execute, issue, and dispatch each cycle, until simulation is complete. Please refer to comments in tomasolu.c for further explanation.

Dispatch
    The dispatch stage includes both instruction fetch and dispatch. It is implementated in function fetch_To_dispatch( .. ).
    Fetch
        In this stage we used get_instr( .. ) to fetch one instruction into an  instruction fetch queue of size 10 to store for each clock cycle. We used our helper function ifq_not_ful( .. ) to determine the status of the fetch queue: 
            1. The fetched instruction is NULL we simply return as it signified the end of the trace execution.
            2. If the fetched instruction is a TRAP instruction we skip it and fetch the next instruction in the same cycle.
            3. In case the fetch queue is full we just fetch nothing and simply return.
            4. In case the fetch queue is not full we fetch one instruction and put it to the end of the queue.
        At the same time we initiatialize instruction attributes including Q[i]s and tom_*_cycles. We also increment the instruction queue size by one.
    
    Dispatch: We attempted to get the instruction from the head of the IFQ and dispatch into the corresponding reservation stations depending on the instruction if it is an integer or floating-point computation . We used our helper function rs_not_full( .. ) to determine whether or not the reservation station is full.
            1. If the fetched instruction is a conditional or unconditional control instruction i.e. a branch in this case we poped this instruction off the queue and shift the queue using our helper function shift_ifq(void).
            2. In case the reservation station is full we simply return i.e. this is essentially a stall due to structural hazard.
            3. In case the reservation station is not full we located the free reservation station indicated by rs_not_full( .. ) and placed the instruction into the slot. 4. We then check RAW hazards by checking the entries of the map table to see if it corresponds to the source registers used in the current instruction. If we do find such an entry, then we know that there is a RAW hazard dependency. And we link the instruction that produces the result needed by the source register in the current instruction to the source register of the current instruction  i.e. curr_instr->Q[ .. ] = map_table[ curr_instr->r_in[i] ]. We then updated the map table to link the current instruction's output register(s) to the reservation station where it resides. Finally we update the dispatch cycle, tom_dispatch_cycle associated with the current instruction and shift the IFQ.

Issue
    The issue stage is implemented by the function dispatch_To_issue( .. ).
    In this stage we search for any empty slots in the functional units.
            1. In case we do not find an empty slot we just return. i.e. this symbolizes a stall due to structural hazard.
            2. In case we find an empty slot we scan through the reservation station and get the oldest instruction without RAW hazard dependency that has not yet been issued. We then put this instruction into the corresponding idle function unit indicated by our helper function fu_not_busy( .. ). We repeat this process untill the functional unis are full or all the instructions in the reservation station have RAW hazard dependencies.
    At last we update the issue cycle, tom_issue_cycle associated with the current instruction i.e. the instruction just got issued into the function units. And this current instruction will execute in the next clock cycle.
    
Execute
    The execute stage is implemented by the function execute_To_CDB( .. ) which includes the functionalites of issue_To_execute( .. ). In this stage we first scan through the function units to execute newly issued instructions i.e. set the  tom_execute_cycle attribute of the instruction in the function unit to the current cycle if it was 0. Then we check if any of the finished executing instructions do not write to the CDB i.e.  !WRITES_CDB( .. ) and clear the reservation station entry of such functions, as well as its functional unit entry. Then, for other completed instructions, we find the oldest one, and push it to the CDB, and clear its reservation station, its functional unit entries and the its map table entries. 
    * Special Case 1 * There are no WAR and WAW hazards in this case because the source registers of the instructions in the reservation stations keep the link to the older instructions in the reservation that generates the result(s) needed by its source register(s). This is equivalent to keeping a local copy of register value in the reservation station.
    * Special Case 2 * If the map table entry of the instruction gets overwritten or cleared we simply do nothing since we have already saved the link to the dependent instructions in the reservation station. This will allow CDB broadcast through the Q[ .. ] fields of the instructions in the reservation station.

CDB / Writeback
    The CDB / Writeback stage is implemented by the function CDB_To_retire( .. ). In this stage we determine if the CDB is empty.
            1. In case it is empty we simply return. No instructions have been compeleted at the current cycle.
            2. In case it has an instruction we first update the CDB cycle, tom_cdb_cycle and scan through the Q[ .. ] fields of each instruction in the reservation station. And we removed the link between the instruction in CDB that generates the result and the instruction in the reservation that requires the result. This is equivalent to the broadcast mechanism in Tomasulo.
    At last we clear the CDB to prevent further broadcasting the same instruction.
